/*
// 5. Create a Realistic Milky Way-like Starfield
const starVertices = [];
const starColors = [];
const starSizes = [];

const galaxyRadius = 1000;
const starCount = 10000;

for (let i = 0; i < starCount; i++) {
    const radius = Math.random() * galaxyRadius;
    const angle = Math.random() * 2 * Math.PI;
    const spiralArmOffset = (Math.random() - 0.5) * 0.4;

    const x = Math.cos(angle + spiralArmOffset) * radius;
    const y = (Math.random() - 0.5) * 200; // Thickness of galaxy disk
    const z = Math.sin(angle + spiralArmOffset) * radius;

    starVertices.push(x, y, z);

    // Color gradient: mostly white, some blue/yellow/orange
    const r = 1;
    const g = 1 - Math.random() * 0.3;
    const b = 1 - Math.random() * 0.6;
    starColors.push(r, g, b);

    // Size variation: closer stars look brighter
    const size = Math.random() * 0.15 + 0.05;
    starSizes.push(size);
}

const starGeometry = new THREE.BufferGeometry();
starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));
starGeometry.setAttribute('color', new THREE.Float32BufferAttribute(starColors, 3));

const starMaterial = new THREE.PointsMaterial({
    vertexColors: true,
    size: 0.1,
    sizeAttenuation: true,
    transparent: true,
    opacity: 0.9,
    depthWrite: false
});

const starfield = new THREE.Points(starGeometry, starMaterial);
scene.add(starfield);
*/